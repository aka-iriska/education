#include <iostream>
#include <string.h>
#include <stdlib.h>
//234 32 34 53463 3 45
using namespace std;
char* sort(char *str) {
	char* ptr, *token, *nexttoken, *a[20], *c;
	int count = 0;
	ptr = &str[0];
	token = strtok_s(str, " ", &nexttoken);
	while (token != nullptr) {
		a[count] = new char[30];
		strcpy_s(a[count], 20, token);
		count++;
		token = strtok_s(nullptr, " ", &nexttoken);
	}
	strcpy_s(str, sizeof(str), "");
	for (int i = 0; i < count-2; i++) {
		for (int j = count - 2; j >= 1; j--)
			if (strlen(a[j]) > strlen(a[j + 1])) {
				c = a[j];
				a[j] = a[j + 1];
				a[j + 1] = c;
			}
		strcat_s(str, strlen(a[i]), a[i]); //доделать
	}
	for (int i = 0; i < count - 1; i++) delete[]a[i];
	return str;
}
struct zap { char numb[30]; zap* p; }; struct zap2 { unsigned int numb; zap2* p; };
int main() {
	zap * r1, *v1, * q /*первый список*/;
	zap2 *f, * r2, *v2/*второй список*/;
	char s[30], * ptr1, * ptr2, n;
	int k, summ;
	cout << "Input string\n";
	gets_s(s);
	sort(s);
	r1 = new zap;
	r2 = new zap2;
	k = strlen(s) - strlen(strchr(s, ' '));
	strncpy_s(r1->numb, s, k);
	r2->numb = atoi(r1->numb);
	r2->p = nullptr;
	r1->p = nullptr;
	q= r1; f= r2;
	v1 = q; v2 = f;
	ptr1 = &s[k+1];
	ptr2 = ptr1;
	k = 0;
	while (ptr1!=nullptr){
		if (ptr2[0]!= ' ' && strcmp(ptr2, "") != 0) k += 1;
		else {
			r1 = new zap;
			r2 = new zap2;
			r1->p = nullptr;
			r2->p = nullptr;
			strncpy_s(r1->numb, ptr1, k);
			ptr1 += k + 1;
			k = 0;
			r2->numb = atoi(r1->numb);
			v1->p = r1; 
			v2->p = r2;
			v1 = r1;
			v2 = r2;
			if (strcmp(ptr2, "") == 0) ptr1 = nullptr;
		}
		ptr2 += 1;
	}
	r2 = f;
	r1 = q;
	//вывод списков
	cout << "\nList1\n";
	if (q == nullptr) cout << "Not found\n";
	else do {
		cout << q->numb << ' ' << endl;
		q = q->p;
	} while (q != nullptr);
	cout << "\nList2\n";
	if (f == nullptr) cout << "Not found\n";
	else {
		do {
			cout << r2->numb << ' ' << endl;
			r2 = r2->p;
		} while (r2 != nullptr);
		cout << "\nThe sums of numbers\n";
		do {
			summ = 0;
			k = 0;
			_itoa_s(f->numb, s, 10);
			while (k != strlen(s)) {
				n = s[k];
				summ += atoi(&n); 
				k+=1; 
			}
			cout << summ << endl;
			f = f->p;
		} while (f != nullptr);
	}
	return 0;
}