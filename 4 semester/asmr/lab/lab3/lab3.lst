     1                                  section .data
     2 00000000 496E70757420410A        InputA db "Input A", 10
     3                                  lenMsgA equ $-InputA
     4 00000008 496E7075742042206E-     InputB db "Input B not equal 0 or -3", 10
     4 00000011 6F7420657175616C20-
     4 0000001A 30206F72202D330A   
     5                                  lenMsgB equ $-InputB
     6 00000022 526573756C74203D20-     ResultMsg db "Result = ", 10
     6 0000002B 0A                 
     7                                  lenMsgResult equ $-ResultMsg
     8 0000002C 4572726F723A20496E-     ErrorStr db "Error: Invalid input format", 10
     8 00000035 76616C696420696E70-
     8 0000003E 757420666F726D6174-
     8 00000047 0A                 
     9                                  lenError equ $-ErrorStr
    10                                  
    11                                  section .bss
    12 00000000 <res Ah>                InBuf resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    13                                  lenIn equ $-InBuf
    14 0000000A <res Ah>                OutBuf resb 10
    15                                  lenOut equ $-OutBuf
    16 00000014 ????????                A resd 1
    17 00000018 ????????                B resd 1
    18 0000001C ????????                F resd 1
    19                                  section .text
    20                                  
    21                                  global _start
    22                                  _start:
    23                                  ;input A
    24                                  ;write
    25 00000000 B804000000              mov eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    26 00000005 BB01000000              mov ebx, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    27 0000000A B9[00000000]            mov ecx, InputA ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    28 0000000F BA08000000              mov edx, lenMsgA ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    29 00000014 CD80                    int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    30                                  ; read
    31 00000016 E8CC000000              call Buffer
    32 0000001B BE[00000000]            mov esi, InBuf
    33 00000020 E8(00000000)            call StrToInt
    34 00000025 83FB00                  cmp ebx, 0
    35 00000028 0F85A1000000            jne Error
    36 0000002E A3[14000000]            mov [A], eax
    37                                  
    38                                  ;input B
    39                                  ;write
    40 00000033 B804000000              mov eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    41 00000038 BB01000000              mov ebx, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    42 0000003D B9[08000000]            mov ecx, InputB ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    43 00000042 BA1A000000              mov edx, lenMsgB ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    44 00000047 CD80                    int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    45                                  ; read
    46 00000049 E899000000              call Buffer
    47 0000004E BE[00000000]            mov esi, InBuf
    48 00000053 E8(00000000)            call StrToInt
    49 00000058 83FB00                  cmp ebx, 0
    50 0000005B 7572                    jne Error
    51 0000005D 83F800                  cmp eax, 0
    52 00000060 746D                    je Error
    53 00000062 83F8FD                  cmp eax, -3
    54 00000065 7468                    je Error
    55 00000067 A3[18000000]            mov [B], eax
    56                                  
    57                                  ;program
    58 0000006C A1[14000000]            mov eax, [A]
    59 00000071 8B0D[18000000]          mov ecx, [B]
    60 00000077 99                      cdq
    61 00000078 F7F9                    idiv ecx ; eax = a/b
    62 0000007A 83F805                  cmp eax, 5
    63 0000007D 7E0F                    jle Cont
    64 0000007F A1[18000000]            mov eax, [B]
    65 00000084 F7E8                    imul eax ; B^2
    66 00000086 83E802                  sub eax, 2 ; B^2-2
    67 00000089 83C103                  add ecx, 3 ; 3+B
    68 0000008C F7F9                    idiv ecx ; B^2-2/3+B
    69                                  Cont:
    70 0000008E A3[1C000000]            mov [F], eax
    71                                  ;int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    72                                  
    73                                  ;output
    74 00000093 B804000000              mov eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    75 00000098 BB01000000              mov ebx, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    76 0000009D B9[22000000]            mov ecx, ResultMsg ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    77 000000A2 BA0A000000              mov edx, lenMsgResult ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    78 000000A7 CD80                    int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    79                                  ;РІС‹РІРѕРґ F
    80 000000A9 A1[1C000000]            mov eax, [F]
    81 000000AE BE[0A000000]            mov esi, OutBuf
    82 000000B3 E8(55000000)            call IntToStr
    83 000000B8 89C6                    mov esi, eax
    84 000000BA B804000000              mov eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    85 000000BF BB01000000              mov ebx, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    86 000000C4 B9[0A000000]            mov ecx, OutBuf ; Р°РґСЂРµСЃ Р±СѓС„РµСЂР°
    87 000000C9 89F2                    mov edx, esi ; РґР»РёРЅР° Р±СѓС„РµСЂР°
    88 000000CB CD80                    int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    89 000000CD EB2F                    jmp Exit
    90                                  Error:
    91 000000CF B804000000                  mov eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    92 000000D4 BB01000000                  mov ebx, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    93 000000D9 B9[2C000000]                mov ecx, ErrorStr ; Р°РґСЂРµСЃ СЃРѕРѕР±С‰РµРЅРёСЏ РѕР± РѕС€РёР±РєРµ
    94 000000DE BA1C000000                  mov edx, lenError ; РґР»РёРЅР° СЃРѕРѕР±С‰РµРЅРёСЏ РѕР± РѕС€РёР±РєРµ
    95 000000E3 CD80                        int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    96 000000E5 EB17                        jmp Exit
    97                                  ; Р’С‹С…РѕРґ
    98                                  Buffer:
    99 000000E7 B803000000              mov eax, 3 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 3 (read)
   100 000000EC BB00000000              mov ebx, 0 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdin=0
   101 000000F1 B9[00000000]            mov ecx, InBuf ; Р°РґСЂРµСЃ Р±СѓС„РµСЂР° РІРІРѕРґР°
   102 000000F6 BA0A000000              mov edx, lenIn ; СЂР°Р·РјРµСЂ Р±СѓС„РµСЂР°
   103 000000FB CD80                    int 80h
   104 000000FD C3                      ret
   105                                  Exit:
   106 000000FE B801000000              mov eax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (exit)
   107 00000103 31DB                    xor ebx, ebx ; РєРѕРґ РІРѕР·РІСЂР°С‚Р° 0
   108 00000105 CD80                    int 80h ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   109                                  %include "../lib.asm"
     1                              <1>     section _text
     2                              <1> StrToInt:
     3 00000000 57                  <1>          push   edi
     4 00000001 B739                <1>          mov    bh, '9'
     5 00000003 B330                <1>          mov    bl, '0'
     6 00000005 56                  <1>          push   esi     ; сохраняем адрес исходной строки
     7 00000006 803E2D              <1>          cmp    byte[esi], '-'
     8 00000009 7501                <1>          jne   .prod
     9 0000000B 46                  <1>          inc    esi     ; пропускаем знак
    10 0000000C FC                  <1> .prod    cld
    11 0000000D 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    12 00000010 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    13 00000011 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    14 00000013 741F                <1>          je     .Return
    15 00000015 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    16 00000017 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    17 00000019 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    18 0000001B 772B                <1>          ja     .Error  ; "выше" – Ошибка
    19 0000001D 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    20 0000001F 6698                <1>          cbw            ; расширяем до слова
    21 00000021 6650                <1>          push   ax      ; сохраняем в стеке
    22 00000023 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    23 00000027 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    24 0000002A 665F                <1>          pop    di      ; в DI – очередная цифра
    25 0000002C 6601F8              <1>          add    ax, di
    26 0000002F 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    27 00000032 EBDC                <1>          jmp    .cycle
    28 00000034 5E                  <1> .Return: pop    esi
    29 00000035 BB00000000          <1>          mov    ebx, 0
    30 0000003A 803E2D              <1>          cmp    byte[esi], '-'
    31 0000003D 7503                <1>          jne    .J
    32 0000003F 66F7DF              <1>          neg    di
    33 00000042 6689F8              <1> .J       mov    ax, di
    34 00000045 98                  <1>          cwde
    35 00000046 EB0B                <1>          jmp    .R
    36 00000048 5E                  <1> .Error:  pop    esi
    37 00000049 B800000000          <1>          mov    eax, 0
    38 0000004E BB01000000          <1>          mov    ebx, 1
    39 00000053 5F                  <1> .R       pop    edi
    40 00000054 C3                  <1>          ret
    41                              <1> IntToStr: 
    42 00000055 57                  <1>          push   edi
    43 00000056 53                  <1>          push   ebx
    44 00000057 52                  <1>          push   edx
    45 00000058 51                  <1>          push   ecx
    46 00000059 56                  <1> 		 push   esi
    47 0000005A C60600              <1> 		 mov    byte[esi],0 ; на место знака
    48 0000005D 83F800              <1>          cmp    eax,0
    49 00000060 7D05                <1>          jge    .l1
    50 00000062 F7D8                <1>          neg    eax
    51 00000064 C6062D              <1>          mov    byte[esi],'-'
    52 00000067 C646060A            <1> .l1      mov    byte[esi+6],10
    53 0000006B BF05000000          <1>          mov    edi,5
    54 00000070 66BB0A00            <1>          mov    bx,10
    55 00000074 6699                <1> .again:  cwd           ; расширили слово до двойного
    56 00000076 66F7F3              <1>          div    bx     ; делим результат на 10
    57 00000079 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    58 0000007C 88143E              <1>          mov    [esi+edi],dl ; пишем символ в строку
    59 0000007F 4F                  <1>          dec    edi    ; переводим указатель на  
    60                              <1>                        ; предыдущую позицию
    61 00000080 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    62 00000084 75EE                <1>          jne    .again
    63 00000086 B906000000          <1>          mov    ecx, 6
    64 0000008B 29F9                <1>          sub    ecx, edi ; длина результата+знак
    65 0000008D 89C8                <1> 		 mov    eax,ecx
    66 0000008F 40                  <1> 		 inc    eax      ; длина результата+0А
    67 00000090 46                  <1>          inc    esi      ; пропускаем знак
    68 00000091 56                  <1> 		 push   esi
    69 00000092 8D343E              <1>          lea    esi,[esi+edi] ; начало результата
    70 00000095 5F                  <1> 		 pop    edi
    71 00000096 F3A4                <1>          rep movsb
    72 00000098 5E                  <1>          pop    esi  
    73 00000099 59                  <1>          pop    ecx
    74 0000009A 5A                  <1>          pop    edx
    75 0000009B 5B                  <1>          pop    ebx
    76 0000009C 5F                  <1>          pop    edi
    77 0000009D C3                  <1>          ret
